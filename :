// ************************************************************************** \\
//                                                                            \\
//                                                                            \\
//   main.rs                                                                  \\
//                                                                            \\
//   By: Thibault Cheneviere <thibault.cheneviere@telecomnancy.eu>            \\
//                                                                            \\
//   Created: 2022/11/28 12:50:10 by Thibault Cheneviere                      \\
//   Updated: 2022/11/28 13:28:23 by Thibault Cheneviere                      \\
//                                                                            \\
// ************************************************************************** \\

extern crate glutin_window;
extern crate graphics;
extern crate opengl_graphics;
extern crate piston;

use glutin_window::GlutinWindow as Window;
use opengl_graphics::{GlGraphics, OpenGL};
use piston::event_loop::{EventSettings, Events};
use piston::input::{RenderArgs, RenderEvent, UpdateArgs, UpdateEvent};
use piston::window::WindowSettings;

pub struct Game {
	gl: GlGraphics,
	snake: Snake,
}

impl Game {
	fn render(&mut self, args: &RenderArgs) {
        const GREEN: [f32; 4] = [0.0, 1.0, 0.0, 1.0];

		self.gl.draw(args.viewport(), |_c, _gl| {
			graphics::clear(GREEN, _gl);
		})
	}

	fn update(&mut self, args: &UpdateArgs) {
	}
}

fn main() {
	let open_gl = OpenGL::V3_2;

	let mut window: Window = WindowSettings::new("Snake game", [200, 200])
		.graphics_api(open_gl)
		.exit_on_esc(true)
		.build()
		.unwrap();

	let mut game = Game{
		gl: GlGraphics::new(open_gl),
	};

	let mut events = Events::new(EventSettings::new());

    while let Some(e) = events.next(&mut window) {
        if let Some(args) = e.render_args() {
            game.render(&args);
        }

        if let Some(args) = e.update_args() {
            game.update(&args);
        }
    }
}
